import { TuiRoot } from "@taiga-ui/core";
import { Component, OnInit } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { JsonPipe } from '@angular/common';
import { 
  AbTableComponent,
  TableHeaderComponent,
  TableCellComponent,
  TableDefaultHeaderDirective,
  TableDefaultCellDirective,
  TableColumnCodeDirective,
  HeaderDataDirective,
  CellDataDirective,
  TableColumnConfig
} from './ab-table';
import { TuiDay, tuiDefaultSort } from "@taiga-ui/cdk";
import { TuiSortDirection } from "@taiga-ui/addon-table";

const TODAY = TuiDay.currentLocal();

function getAge(dob: TuiDay): number {
  const years = TODAY.year - dob.year;
  const months = TODAY.month - dob.month;
  const days = TODAY.day - dob.day;
  const offset = months > 0 || (!months && days > 9) ? 1 : 0;
  return years + offset;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
interface Person {
  id: number;
  name: string;
  dob: TuiDay;
  age: number;
}

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    RouterOutlet,
    TuiRoot,
    AbTableComponent,
    TableHeaderComponent,
    TableCellComponent,
    TableDefaultHeaderDirective,
    TableDefaultCellDirective,
    TableColumnCodeDirective,
    HeaderDataDirective,
    CellDataDirective,
    JsonPipe
  ],
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss'
})
export class AppComponent implements OnInit {
  title = 'ScratchTable';

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫
  columnConfig: TableColumnConfig[] = [
    {
      code: 'name',
      name: '–ò–º—è',
      startSize: 100,
      sortable: true,
      resizable: true,
    },
    {
      code: 'dob',
      name: '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
      sortable: false,
      resizable: true,
    },
    {
      code: 'age',
      name: '–í–æ–∑—Ä–∞—Å—Ç',
      sortable: true,
      resizable: false,
    }
  ];

  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ - 20 –∑–∞–ø–∏—Å–µ–π —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
  demoData: Person[] = [
    { id: 1, name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω', dob: TuiDay.fromLocalNativeDate(new Date(1985, 5, 15)), age: 0 },
    { id: 2, name: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä', dob: TuiDay.fromLocalNativeDate(new Date(1990, 3, 10)), age: 0 },
    { id: 3, name: '–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π', dob: TuiDay.fromLocalNativeDate(new Date(1978, 9, 22)), age: 0 },
    { id: 4, name: '–°–º–∏—Ä–Ω–æ–≤ –°–µ—Ä–≥–µ–π', dob: TuiDay.fromLocalNativeDate(new Date(2000, 1, 5)), age: 0 },
    { id: 5, name: '–ö—É–∑–Ω–µ—Ü–æ–≤ –ú–∏—Ö–∞–∏–ª', dob: TuiDay.fromLocalNativeDate(new Date(1995, 7, 30)), age: 0 },
    { id: 6, name: '–ú–æ—Ä–æ–∑–æ–≤ –ê–Ω–¥—Ä–µ–π', dob: TuiDay.fromLocalNativeDate(new Date(1982, 11, 12)), age: 0 },
    { id: 7, name: '–í–æ–ª–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π', dob: TuiDay.fromLocalNativeDate(new Date(1975, 2, 18)), age: 0 },
    { id: 8, name: '–õ–µ–±–µ–¥–µ–≤ –ù–∏–∫–æ–ª–∞–π', dob: TuiDay.fromLocalNativeDate(new Date(1998, 4, 25)), age: 0 },
    { id: 9, name: '–ö–æ–∑–ª–æ–≤ –ú–∞–∫—Å–∏–º', dob: TuiDay.fromLocalNativeDate(new Date(1989, 8, 8)), age: 0 },
    { id: 10, name: '–ù–æ–≤–∏–∫–æ–≤ –í–ª–∞–¥–∏–º–∏—Ä', dob: TuiDay.fromLocalNativeDate(new Date(1979, 6, 1)), age: 0 },
    { id: 11, name: '–°–æ–∫–æ–ª–æ–≤ –ê—Ä—Ç–µ–º', dob: TuiDay.fromLocalNativeDate(new Date(1992, 10, 15)), age: 0 },
    { id: 12, name: '–ü–æ–ø–æ–≤ –ì–µ–æ—Ä–≥–∏–π', dob: TuiDay.fromLocalNativeDate(new Date(1987, 0, 20)), age: 0 },
    { id: 13, name: '–õ–µ–±–µ–¥–µ–≤ –ï–≤–≥–µ–Ω–∏–π', dob: TuiDay.fromLocalNativeDate(new Date(1973, 3, 7)), age: 0 },
    { id: 14, name: '–ö–æ–∑–ª–æ–≤ –í–∏—Ç–∞–ª–∏–π', dob: TuiDay.fromLocalNativeDate(new Date(2001, 5, 11)), age: 0 },
    { id: 15, name: '–ú–æ—Ä–æ–∑–æ–≤ –ö–∏—Ä–∏–ª–ª', dob: TuiDay.fromLocalNativeDate(new Date(1994, 8, 29)), age: 0 },
    { id: 16, name: '–ü–µ—Ç—Ä–æ–≤ –í—è—á–µ—Å–ª–∞–≤', dob: TuiDay.fromLocalNativeDate(new Date(1980, 4, 14)), age: 0 },
    { id: 17, name: '–°–∏–¥–æ—Ä–æ–≤ –ò–≥–æ—Ä—å', dob: TuiDay.fromLocalNativeDate(new Date(1996, 2, 22)), age: 0 },
    { id: 18, name: '–ò–≤–∞–Ω–æ–≤ –î–µ–Ω–∏—Å', dob: TuiDay.fromLocalNativeDate(new Date(1983, 7, 9)), age: 0 },
    { id: 19, name: '–°–º–∏—Ä–Ω–æ–≤ –û–ª–µ–≥', dob: TuiDay.fromLocalNativeDate(new Date(1977, 11, 3)), age: 0 },
    { id: 20, name: '–ö—É–∑–Ω–µ—Ü–æ–≤ –†–æ–º–∞–Ω', dob: TuiDay.fromLocalNativeDate(new Date(1999, 1, 27)), age: 0 }
  ];

  // –¢–µ–∫—É—â–∏–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  tableData: Person[] = [];
  
  // –¢–µ–∫—É—â–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  currentSortKey: string = 'name';
  currentSortDirection: TuiSortDirection = TuiSortDirection.Asc;

  totalItems = 0;

  ngOnInit(): void {
    // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
    this.demoData = this.demoData.map(person => ({
      ...person,
      age: getAge(person.dob)
    }))
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    this.sortData();
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  onSortChange(event: {key: string, direction: number}): void {
    this.currentSortKey = event.key;
    this.currentSortDirection = event.direction as TuiSortDirection;
    this.sortData();
  }

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  sortData(): void {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    this.tableData = [...this.demoData];
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    this.tableData.sort((a: Person, b: Person) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª—é—á–∞
      let valueA, valueB;
      
      if (this.currentSortKey === 'name') {
        valueA = a.name;
        valueB = b.name;
      } else if (this.currentSortKey === 'dob') {
        valueA = a.dob;
        valueB = b.dob;
      } else if (this.currentSortKey === 'age') {
        valueA = a.age;
        valueB = b.age;
      } else {
        // –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        return 0;
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      return this.currentSortDirection * tuiDefaultSort(valueA, valueB);
    });

    this.tableData = this.tableData
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    this.totalItems = this.tableData.length;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–∫–∏
  onPageChange(event: {page: number, size: number}): void {
    console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', event);

    // this.tableData = this.demoData.slice(event.page * event.size, (event.page + 1) * event.size);
  }

  onColumnWidthChange(event: {code: string, width: number}): void {
    console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–∫–∏:', event);
  }

  exampleTemplate = `
  <app-table 
      [columnConfig]="columnConfig"
      [data]="tableData"
      [totalItems]="totalItems"
      [tableName]="'users-table'"
      (pageChange)="onPageChange($event)"
      (sortChange)="onSortChange($event)"
      (columnWidthChange)="onColumnWidthChange($event)">
      <!-- –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã -->
      <ng-template appTableDefaultHeader let-data>
        <app-table-header [data]="data">
          {{ data }}
        </app-table-header>
      </ng-template>

      <ng-template appTableDefaultCell let-data>
        <app-table-cell [data]="data">
            {{ data }}
        </app-table-cell>
      </ng-template>
      
      <!-- –ö–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "name" -->
      <ng-container appTableColumnCode="name">
        <ng-template appHeaderData let-data>
          <app-table-header [data]="data">
            üìã {{ data }}
          </app-table-header>
        </ng-template>
        <ng-template appCellData let-data>
          <app-table-cell [data]="data">
            üë§ {{ data }}
          </app-table-cell>
        </ng-template>
      </ng-container>

      <!-- –ö–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "age" -->
      <ng-container appTableColumnCode="age">
        <ng-template appCellData let-data>
          <app-table-cell [data]="data">
            üî¢ {{ data }} –ª–µ—Ç
          </app-table-cell>
        </ng-template>
      </ng-container>
      
    </app-table>`
}
